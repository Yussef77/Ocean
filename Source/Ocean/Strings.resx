<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ActiveRuleSetCanNotContainPipeSymbols" xml:space="preserve">
    <value>Active rule set can not contain any pipe symbols. This is normally caused when a validation constant is passed that is for multiple rule sets and not a single rule set that this property requires.</value>
  </data>
  <data name="AtLeastOnePasswordCharacteristicMustBeYes" xml:space="preserve">
    <value>At least one password characteristic must be Yes</value>
  </data>
  <data name="BankRoutingNumberValidationRuleCanOnlyBeAppliedToStringProperties" xml:space="preserve">
    <value>Bank routing number validation rule can only be applied to String properties.</value>
  </data>
  <data name="CreditCardNumberIsNotAValidCreditCardNumberFormat" xml:space="preserve">
    <value>{0} {1} is not a valid credit card number.</value>
  </data>
  <data name="CreditCardNumberIsNotAValidCreditCardNumberOnlyNumericInputIsAllowedFormat" xml:space="preserve">
    <value>{0} {1} is not a valid credit card number.  Only numeric input is allowed.</value>
  </data>
  <data name="CreditCardNumberValidationRuleCanOnlyBeAppliedToStringProperties" xml:space="preserve">
    <value>Credit card number validation rule can only be applied to String properties.</value>
  </data>
  <data name="DateMustBeEqualToTargetValueFormat" xml:space="preserve">
    <value>{0} must be equal to {1}.</value>
  </data>
  <data name="DateMustBeGreaterThanOrEqualToTargetValueFormat" xml:space="preserve">
    <value>{0} must be greater than or equal to {1}.</value>
  </data>
  <data name="DateMustBeGreaterThanTargetValueFormat" xml:space="preserve">
    <value>{0} must be greater than {1}.</value>
  </data>
  <data name="DateMustBeLessThanOrEqualToTargetValueFormat" xml:space="preserve">
    <value>{0} must be less than or equal to {1}.</value>
  </data>
  <data name="DateMustBeLessThanTargetValueFormat" xml:space="preserve">
    <value>{0} must be less than {1}.</value>
  </data>
  <data name="DateMustNotBeEqualTargetValueFormat" xml:space="preserve">
    <value>{0} must not equal {1}.</value>
  </data>
  <data name="DomainValidationValueDidNotMatchAnyAcceptableValueFormat" xml:space="preserve">
    <value>{0} {1} did not match any of the acceptable values {2}.</value>
  </data>
  <data name="EndLoadingNeverCalledAfterBegingLoading" xml:space="preserve">
    <value>EndLoading never called after a BeginLoading call was made. No operations are permitted until EndLoading has been called.</value>
  </data>
  <data name="EndLoadingNeverCalledAfterBeginLoading" xml:space="preserve">
    <value>EndLoading never called after a BeginLoading call was made. No operations are permitted until EndLoading has been called.</value>
  </data>
  <data name="EnumValueNotProgrammedFormat" xml:space="preserve">
    <value>The value {0} for enum type name {1} was not programmed.</value>
  </data>
  <data name="InRangeRuleMustBeGreaterThanFormat" xml:space="preserve">
    <value>{0} must be greater than {1}.</value>
  </data>
  <data name="InRangeRuleMustBeGreaterThanOrEqualFormat" xml:space="preserve">
    <value>{0} must be greater than or equal to {1}.</value>
  </data>
  <data name="InRangeRuleMustBeLessThanFormat" xml:space="preserve">
    <value>{0} must be less than {1}.</value>
  </data>
  <data name="InRangeRuleMustBeLessThanOrEqualFormat" xml:space="preserve">
    <value>{0} must be less than or equal to {1}.</value>
  </data>
  <data name="InvalidEnumValueExceptionMessageFormat" xml:space="preserve">
    <value>Value {0} of enum {1} is not supported.</value>
  </data>
  <data name="InvalidEnumValueExceptionMessageFormat1" xml:space="preserve">
    <value>Value {0} of enum {1} is not supported.</value>
  </data>
  <data name="IsARequiredFieldFormat" xml:space="preserve">
    <value>{0} is a required field.</value>
  </data>
  <data name="IsGreaterThanMaxValue" xml:space="preserve">
    <value>Is greater than maxValue</value>
  </data>
  <data name="IsLongerThanFormat" xml:space="preserve">
    <value>{0} is longer than {1}.</value>
  </data>
  <data name="KeyMustHaveAValue" xml:space="preserve">
    <value>Key must have a value.</value>
  </data>
  <data name="MaximumLengthMustBeGreaterThanZero" xml:space="preserve">
    <value>Maximum length must be greater than zero.</value>
  </data>
  <data name="MinimumLengthIsFormat" xml:space="preserve">
    <value>{0} minimum length is {1}.</value>
  </data>
  <data name="MinimumLengthMustBeLessThanOrEqualToMaximumLength" xml:space="preserve">
    <value>Minimum length must be less than or equal to the maximum length.</value>
  </data>
  <data name="MultipleOfValidatorRequirsItBeAppliedToAnIntegerProperty" xml:space="preserve">
    <value>Multiple of validator requires it be applied to an integer property.</value>
  </data>
  <data name="MustBeEqualToOrGreaterThanFormat" xml:space="preserve">
    <value>{0} must be greater than or equal to {1}.</value>
  </data>
  <data name="MustBeEqualToOrLessThanFormat" xml:space="preserve">
    <value>{0} must be less than or equal to {1}.</value>
  </data>
  <data name="MustBeGreaterThanFormat" xml:space="preserve">
    <value>{0} must be greater than {1}.</value>
  </data>
  <data name="MustBeGreaterThanOrEqualToMinimumLength" xml:space="preserve">
    <value>Must be greater than or equal to Minimum Length.</value>
  </data>
  <data name="MustBeGreaterThanZero" xml:space="preserve">
    <value>Must be greater than zero.</value>
  </data>
  <data name="MustBeLessThanFormat" xml:space="preserve">
    <value>{0} must be less than {1}.</value>
  </data>
  <data name="NotNullIsDBNullFormat" xml:space="preserve">
    <value>{0} is DBNull but is required to be non-null.</value>
  </data>
  <data name="NotNullIsNullFormat" xml:space="preserve">
    <value>{0} is null but is required to be non-null.</value>
  </data>
  <data name="NullValueIsNotAllowedFormat" xml:space="preserve">
    <value>{0} null value is not allowed.</value>
  </data>
  <data name="ParameterMustNotBeNull" xml:space="preserve">
    <value>Parameter must not be null.</value>
  </data>
  <data name="PasswordAtLeaseOneDigitCharacter" xml:space="preserve">
    <value>at least one digit character, </value>
  </data>
  <data name="PasswordAtLeaseOneLowerCaseCharacter" xml:space="preserve">
    <value>at least one lower case character, </value>
  </data>
  <data name="PasswordAtLeaseOneSpecialCharacterFormat" xml:space="preserve">
    <value>at least one of these special characters {0}</value>
  </data>
  <data name="PasswordAtLeaseOneUpperCaseCharacter" xml:space="preserve">
    <value>at least one upper case character, </value>
  </data>
  <data name="PasswordMaximumLengthIsFormat" xml:space="preserve">
    <value>is longer than {0}, </value>
  </data>
  <data name="PasswordMinimumLengthIsFormat" xml:space="preserve">
    <value>minimum length is {0}, </value>
  </data>
  <data name="PropertyMustBeEqualToOtherPropertyFormat" xml:space="preserve">
    <value>{0} must be equal to {1}.</value>
  </data>
  <data name="PropertyMustBeGreaterThanOrEqualToOtherPropertyFormat" xml:space="preserve">
    <value>{0} must be greater than or equal to {1}.</value>
  </data>
  <data name="PropertyMustBeGreaterThanOtherPropertyFormat" xml:space="preserve">
    <value>{0} must be greater than {1}.</value>
  </data>
  <data name="PropertyMustBeLessThanOrEqualToOtherPropertyFormat" xml:space="preserve">
    <value>{0} must be less than or equal to {1}.</value>
  </data>
  <data name="PropertyMustBeLessThanOtherPropertyFormat" xml:space="preserve">
    <value>{0} must be less than {1}.</value>
  </data>
  <data name="PropertyMustNotBeEqualToOtherPropertyFormat" xml:space="preserve">
    <value>{0} must not equal {1}.</value>
  </data>
  <data name="RegularExpressionDidNotMatchTheRequiredEmailPatternFormat" xml:space="preserve">
    <value>{0} did not match the required email pattern.</value>
  </data>
  <data name="RegularExpressionDidNotMatchTheRequiredIPAddressPatternFormat" xml:space="preserve">
    <value>{0} did not match the required IP address pattern.</value>
  </data>
  <data name="RegularExpressionDidNotMatchTheRequiredPatternFormat" xml:space="preserve">
    <value>{0} did not match the required {1} pattern.</value>
  </data>
  <data name="RegularExpressionDidNotMatchTheRequiredSSNPatternFormat" xml:space="preserve">
    <value>{0} did not match the required SSN pattern.</value>
  </data>
  <data name="RegularExpressionDidNotMatchTheRequiredURLPatternFormat" xml:space="preserve">
    <value>{0} did not match the required URL pattern.</value>
  </data>
  <data name="RegularExpressionDidNotMatchTheRequiredUSPhoneNumberPatternFormat" xml:space="preserve">
    <value>{0} did not match the required US phone number pattern.</value>
  </data>
  <data name="RegularExpressionDidNotMatchTheRequiredZipCodePatternFormat" xml:space="preserve">
    <value>{0} did not match the required zip code pattern.</value>
  </data>
  <data name="RegularExpressionInvalidCustomRegularExpressionPattern" xml:space="preserve">
    <value>Invalid custom regular expression pattern.</value>
  </data>
  <data name="StateAbbreviationIsNotValidFormat" xml:space="preserve">
    <value>{0} '{1}' state abbreviation is not valid.</value>
  </data>
  <data name="StringIsNullEmptyOrWhiteSpaceFormat" xml:space="preserve">
    <value>{0} is null, empty, or white space.</value>
  </data>
  <data name="TheEncryptedTextMustHaveAValue" xml:space="preserve">
    <value>The encrypted text must have a value.</value>
  </data>
  <data name="TheTextMustHaveAValue" xml:space="preserve">
    <value>The text must have valid value.</value>
  </data>
  <data name="UnableToCreateAESCryptoObject" xml:space="preserve">
    <value>Unable to create AES crypto object.</value>
  </data>
  <data name="ValidationAttributeResourcePropertyNotStringTypeFormat" xml:space="preserve">
    <value>Validation attribute resource property {0} is not a string type, instead is {1}.</value>
  </data>
  <data name="ValueIsNotAValidBankRoutingNumberAllBankRoutingNumbersAreNineDigitsInLengthFormat" xml:space="preserve">
    <value>{0} {1} is not a valid bank routing number. All bank routing numbers are 9 digits in length.</value>
  </data>
  <data name="ValueIsNotAValidBankRoutingNumberAllBankRoutingNumbersCharactersMustBeNumericFormat" xml:space="preserve">
    <value>{0} {1} is not a valid bank routing number. Only numeric input is allowed.</value>
  </data>
  <data name="ValueIsNotAValidBankRoutingNumberAllBankRoutingNumbersFirstDigitMustBeZeorOrOneFormat" xml:space="preserve">
    <value>{0} {1} is not a valid bank routing number. The first digit must be a 0 or a 1.</value>
  </data>
  <data name="ValueIsNotAValidBankRoutingNumberFormat" xml:space="preserve">
    <value>{0} {1} is not a valid bank routing number.</value>
  </data>
  <data name="ValueIsNotDivisibleByFormat" xml:space="preserve">
    <value>{0} value {1} is not divisible by {2}.</value>
  </data>
  <data name="ValueIsNullEmptyOrWhiteSpace" xml:space="preserve">
    <value>Value is null, empty, or white space.</value>
  </data>
  <data name="ValueMustBeEqualToTargetValueFormat" xml:space="preserve">
    <value>{0} must be equal to {1}.</value>
  </data>
  <data name="ValueMustBeGreaterThanDateTimeMinDateFormat" xml:space="preserve">
    <value>{0} must be greater than DateTime.MinValue.</value>
  </data>
  <data name="ValueMustBeGreaterThanOne" xml:space="preserve">
    <value>Value must be greater than one.</value>
  </data>
  <data name="ValueMustBeGreaterThanOrEqualToTargetValueFormat" xml:space="preserve">
    <value>{0} must be greater than or equal to {1}.</value>
  </data>
  <data name="ValueMustBeGreaterThanTargetValueFormat" xml:space="preserve">
    <value>{0} must be greater than {1}.</value>
  </data>
  <data name="ValueMustBeLessThanOrEqualToTargetValueFormat" xml:space="preserve">
    <value>{0} must be less than or equal to {1}.</value>
  </data>
  <data name="ValueMustBeLessThanTargetValueFormat" xml:space="preserve">
    <value>{0} must be less than {1}.</value>
  </data>
  <data name="ValueMustNotBeEqualToTargetValueFormat" xml:space="preserve">
    <value>{0} must not equal {1}.</value>
  </data>
  <data name="ValueWasNullFormat" xml:space="preserve">
    <value>{0} was null.</value>
  </data>
  <data name="ValueWasNullOrDBNullButWasRequired" xml:space="preserve">
    <value>Value was null or DBNull but was required.</value>
  </data>
  <data name="ValueWasNullOrDBNullOrEmptyStringButWasRequired" xml:space="preserve">
    <value>Value was null, DBNull, or empty string but was required.</value>
  </data>
</root>